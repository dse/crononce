#!/usr/bin/env perl
use warnings;
use strict;
use POSIX qw(floor strftime);
use List::Util qw(any);
use File::Basename qw(basename);

our $EXE = basename($0);
$EXE =~ s{\.[A-Za-z0-9]+$}{};

our $verbosity = 0;
our $dry_run;

use Getopt::Long;
Getopt::Long::Configure qw(gnu_getopt);
Getopt::Long::GetOptions(
    'z|zone=s' => sub { $ENV{TZ} = $_[1]; },
    'v|verbosity+' => \$verbosity,
    'n|dry-run' => \$dry_run,
) or die(":-(\n");

our %CRON_WDAY = qw(sun 0 mon 1 tue 2 wed 3 thu 4 fri 5 sat 6);
our %CRON_MON = qw(jan 0 feb 1 mar 2 apr 3 may 4 jun 5 jul 6 aug 7 sep 8 oct 9 nov 10 dec 11);

my $time = floor((time() + 30) / 60) * 60;
my ($min, $hr, $mday, $mon, $wday) = (localtime($time))[1, 2, 3, 4, 6];

if ($verbosity) {
    logg("Current time: %s\n", strftime('%Y-%m-%dT%H:%M:%S%z', localtime($time)));
    logg("              %s\n", strftime('%Y-%m-%dT%H:%M:%SZ', gmtime($time)));
    logg("%d %d %d %d %d\n", $min, $hr, $mday, $mon, $wday);
}

while (<>) {
    s{\R\z}{};
    if (/^\s*#/) {
        next;
    }
    if (/^\s*$/) {
        next;
    }
    if (/^\s*(\S+)\s*=\s*/) {
        my ($name, $value) = ($1, $');
        if ($value =~ m{^'.*'$} || $value =~ m{^".*"$}) {
            $value = substr($value, 1, -1);
        }
        if ($verbosity) {
            logg("setting %s = %s\n", $name, $value);
        }
        $ENV{$name} = $value;
        next;
    }
    if (/^\s*(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S.*)$/) {
        my ($cron_min, $cron_hr, $cron_mday, $cron_mon, $cron_wday, $cron_cmd) = split(' ', $_, 6);
        $cron_mon  = $CRON_MON{lc($cron_mon)} // $cron_mon;
        $cron_wday = $CRON_WDAY{lc($cron_wday)} // $cron_wday;
        if (cron_match($min, $cron_min) && cron_match($hr, $cron_hr) &&
            cron_match($mday, $cron_mday) && cron_match($mon, $cron_mon) &&
            cron_match($wday, $cron_wday)) {
            if ($dry_run || $verbosity) {
                logg("cron job for %s %s %s %s %s matches\n",
                     $cron_min, $cron_hr, $cron_mday, $cron_mon, $cron_wday);
            }
            if ($dry_run) {
                logg("DRY RUN: not executing: %s\n", $cron_cmd);
                next;
            }
            if ($verbosity) {
                logg("executing: %s\n", $cron_cmd);
            }
            daemonize($cron_cmd);
        } else {
            if ($dry_run || $verbosity) {
                logg("cron job for %s %s %s %s %s does not match\n",
                     $cron_min, $cron_hr, $cron_mday, $cron_mon, $cron_wday);
            }
        }
        next;
    }
    if ($dry_run || $verbosity) {
        logg("invalid format: $_\n");
    }
}

sub daemonize {
    my @cmd = @_;

    my $pid = fork();
    die("fork: $!\n") if !defined $pid;
    if (!$pid) {                # child
        die("cannot detach from controlling terminal: $!\n") if POSIX::setsid() < 0;
        my $pid = fork();
        die("fork: $!\n") if !defined $pid;
        if (!$pid) {            # grandchild
            my $hc_fd;          # highest closed file descriptor
            for (my $fd = 3; $fd < open_max(); $fd += 1) {
                $hc_fd = $fd if POSIX::close($fd);
            }
            $hc_fd //= open_max(); # guess
            close STDIN;
            close STDOUT;
            close STDERR;
            open(STDIN, "</dev/null");
            if (defined $ENV{CRONONCE_STDOUT}) {
                open(STDOUT, "+>$ENV{CRONONCE_STDOUT}");
            } else {
                open(STDOUT, "+>/dev/null");
            }
            if (defined $ENV{CRONONCE_STDERR}) {
                open(STDERR, "+>$ENV{CRONONCE_STDERR}");
            } else {
                open(STDERR, "+>/dev/null");
            }
            if ($hc_fd) {
                my @fh;
                for (my $fd = 3; $fd <= $hc_fd; $fd += 1) {
                    open($fh[$fd], "</dev/null");
                }
            }
            exec(@cmd) or die("exec: $!\n");
            exit;               # silence a perl warning
        }
        POSIX::_exit(0);
    }
    waitpid($pid, 0);
}

# our $RX_RANGE           = qr{(?:(\*|\d+(-(\d+)?)?)(/\d+)?)}
# our $RX_CRON_FIELD      = qr{(?:\Q${RX_RANGE}\E(,\Q${RX_RANGE}\E)+)};
# our $RX_CRON_WDAY_FIELD = qr{(?:\Q$RX_CRON_FIELD\E|sun|mon|tue|wed|thu|fri|sat)};
# our $RX_CRON_MON_FIELD  = qr{(?:\Q$RX_CRON_FIELD\E|jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)};

sub cron_match {
    my ($num, $field) = @_;
    return $field eq '*' || any { cron_match_range_step($num, $_) } split(',', $field);
}

sub cron_match_range_step {
    my ($num, $range_step) = @_;
    my ($range, $step) = split('/', $range_step, 2);
    if (!defined $step || $step eq '') {
        $step = 1;
    }
    if ($range eq '*') {        # * or */3
        return $num % $step == 0;
    }
    my ($low, $high) = split('-', $range, 2); # 1 or 1- or 1-5
    if (!defined $high) {       # not a range
        return $num eq $low;
    }
    if ($low eq '') {
        $low = 0;
    }
    if ($high eq '') {
        $high = 999999999;
    }
    return $num >= $low && $num <= $high && ($num % $step == $low % $step);
}

sub logg {
    my ($fmt, @args) = @_;
    $fmt =~ s{\R\z}{};
    my $timestamp = strftime('%Y-%m-%dT%H:%M:%S%z', localtime(time()));
    printf("[%s] %s: %s:%d: ", $timestamp, $EXE, $ARGV // '-', $. // -1);
    printf($fmt, @args);
    print("\n");
}

sub open_max {
    my $open_max = POSIX::sysconf(&POSIX::_SC_OPEN_MAX);
    return (!defined $open_max || $open_max < 0) ? 64 : $open_max;
}
